---
title: python中装饰器的理解总结
tags: 装饰器
notebook: python常识
---
### 这里是一个简单的装饰器
```python {.line-numbers}
#装饰器
def w1(func): # 这里的func是下面用作装饰的内容传递过来的一个 函数的引用
    # func()
    print('123')
    def inner():
        # 验证1
        # 验证2
        # 验证3
        print('这里是验证部分')
        # func()
    print(111)
    return inner

@w1
def f1():
    print('f1')
f1()
```
### 代码的执行顺序：
1.首先进行预加载，代码从上往下执行，到@w1的时候，进行第二步

2.@w1的操作，其实此处相当于w1()，执行一遍w1()函数

3.代码函数f1进行预加载，然后到f1()处，此时原本应该执行f1()的内部代码，但是因为使用了装饰器的原因，会先执行一遍装饰器对应的代码，就是w1(),这里的w1()的内容跟上一次的有点不一样，这一次是直接返回了内部函数的的引用，然后因为使用了装饰器，会执行对应的内部的内容，然后执行f1()函数，这里的f1()并不会真正的去内部执行，而是靠上面的装饰器内部传入的参数去执行的，可以注释掉内部函数中外部参数的调用，即可显示出来

##总结：
1.@xxx 其实是相当于 xxx(f1)
2.@xxx下面的函数内部的执行并不在下面调用f1()时执行，而是在上面的闭包函数的内部函数执行(使用外部传入的变量进行执行)
3.最后的f1()调用时，又一次执行xxx()，并不会执行 f1 其中的内容
